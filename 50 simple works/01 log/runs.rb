
require 'csv'

# csvに出力します。
# requireは必要です。
ar = []
ar << [11, 'e', 28]
ar << [12, 'e2', 32]
za = [1, 2, 3]
zb = [4, 5, 6, za]
zc = [7, 8, 9, zb]
zz = [za, zb, zc]
ar << zz
CSV.open('result.csv', 'w') do |c|
  c << %w(id name age)
  c << [1, 'maruvi', 1]
  c << [2, 'jj', 34]
  c << [3, 'f, g', 34]
  a = 'a, b, c, d'
  c << [4, a, 34]
  ar.each do
    c << _1
  end
end
# openしてブロックでブロック引数に配列を渡してあげればうまくやってくれるようです。
# カンマを含んだ文字列もちゃんとやってくれるようです。
# 配列の中の変数展開もやってくれます。
# 配列の中の配列は展開してくれません。eachなどで回しながらブロック引数に渡してください。
# 各要素内の変数は展開しますが、一つの要素として出力されます。
################################

header =  (1..5).to_a.map{"parts_#{_1}"}
p %w(id name) + header
################################

# Arrayの結合の場合、+ よりconcatを使った方が速いそうです。
# 要素を1つ追加     <<
# 要素を複数追加    push
# 配列同士の結合    concat
header = (1..5).to_a.map{"parts_#{_1}"}
p %w(id name).concat(header)
################################

# Arrayの銭湯に要素を追加する。
a = %w(a b c d)
p a.unshift(1)
################################





